/*
Stylus variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon_home_width;
}

The large array-like variables contain all information about a single icon
$icon_home = x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet = width height image $spritesheet_sprites;
*/
$bottom_border_name = 'bottom-border';
$bottom_border_x = 0px;
$bottom_border_y = 0px;
$bottom_border_offset_x = 0px;
$bottom_border_offset_y = 0px;
$bottom_border_width = 768px;
$bottom_border_height = 60px;
$bottom_border_total_width = 768px;
$bottom_border_total_height = 95px;
$bottom_border_image = '../images/sprites/icons.png';
$bottom_border = 0px 0px 0px 0px 768px 60px 768px 95px '../images/sprites/icons.png' 'bottom-border';
$check_box_name = 'check-box';
$check_box_x = 65px;
$check_box_y = 68px;
$check_box_offset_x = -65px;
$check_box_offset_y = -68px;
$check_box_width = 18px;
$check_box_height = 18px;
$check_box_total_width = 768px;
$check_box_total_height = 95px;
$check_box_image = '../images/sprites/icons.png';
$check_box = 65px 68px -65px -68px 18px 18px 768px 95px '../images/sprites/icons.png' 'check-box';
$check_mark_name = 'check-mark';
$check_mark_x = 36px;
$check_mark_y = 68px;
$check_mark_offset_x = -36px;
$check_mark_offset_y = -68px;
$check_mark_width = 21px;
$check_mark_height = 27px;
$check_mark_total_width = 768px;
$check_mark_total_height = 95px;
$check_mark_image = '../images/sprites/icons.png';
$check_mark = 36px 68px -36px -68px 21px 27px 768px 95px '../images/sprites/icons.png' 'check-mark';
$radio_circle_name = 'radio-circle';
$radio_circle_x = 0px;
$radio_circle_y = 68px;
$radio_circle_offset_x = 0px;
$radio_circle_offset_y = -68px;
$radio_circle_width = 28px;
$radio_circle_height = 27px;
$radio_circle_total_width = 768px;
$radio_circle_total_height = 95px;
$radio_circle_image = '../images/sprites/icons.png';
$radio_circle = 0px 68px 0px -68px 28px 27px 768px 95px '../images/sprites/icons.png' 'radio-circle';
$radio_point_name = 'radio-point';
$radio_point_x = 91px;
$radio_point_y = 68px;
$radio_point_offset_x = -91px;
$radio_point_offset_y = -68px;
$radio_point_width = 14px;
$radio_point_height = 13px;
$radio_point_total_width = 768px;
$radio_point_total_height = 95px;
$radio_point_image = '../images/sprites/icons.png';
$radio_point = 91px 68px -91px -68px 14px 13px 768px 95px '../images/sprites/icons.png' 'radio-point';
$sp_icons_width = 768px;
$sp_icons_height = 95px;
$sp_icons_image = '../images/sprites/icons.png';
$sp_icons_sprites = $bottom_border $check_box $check_mark $radio_circle $radio_point;
$sp_icons = 768px 95px '../images/sprites/icons.png' $sp_icons_sprites;

// These "retina group" variables are mappings for the naming and pairing of normal and retina sprites.

// The list formatted variables are intended for mixins like `retinaSprite` and `retinaSprites`.


/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  spriteWidth($icon_home)
}

.icon-email {
  sprite($icon_email)
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
spriteWidth($sprite) {
  width: $sprite[4];
}

spriteHeight($sprite) {
  height: $sprite[5];
}

spritePosition($sprite) {
  background-position: $sprite[2] $sprite[3];
}

spriteImage($sprite) {
  background-image: url($sprite[8]);
}

sprite($sprite) {
  spriteImage($sprite)
  spritePosition($sprite)
  spriteWidth($sprite)
  spriteHeight($sprite)
}


// The `retinaSprite` mixin sets up rules and a media query for a sprite/retina sprite.
// It should be used with a "retina group" variable.
//
// The media query is from CSS Tricks: https://css-tricks.com/snippets/css/retina-display-media-query/
//
// $icon_home_group = 'icon-home' $icon_home $icon_home_2x;
//
// .icon-home {
//     retinaSprite($icon_home_group)
// }


spriteBackgroundSize($sprite) {
	background-size $sprite[6] $sprite[7]
}

retinaSprite($retina_group) {
	$normal_sprite = $retina_group[1]
	$retina_sprite = $retina_group[2]
	sprite($normal_sprite)

	@media (-webkit-min-device-pixel-ratio: 2),
				 (min-resolution: 192dpi) {
		spriteImage($retina_sprite)
		spriteBackgroundSize($normal_sprite)
	}
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of Stylus

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

sprites($spritesheet_sprites);
*/
sprites($sprites) {
  for $sprite in $sprites {
    $sprite_name = $sprite[9];
    .{$sprite_name} {
      sprite($sprite);
    }
  }
}

// The `retinaSprites` mixin generates a CSS rule and media query for retina groups
// This yields the same output as CSS retina template but can be overridden in Stylus
//
// retinaSprites($retina_groups)

retinaSprites($retina_groups) {
	for $retina_group in $retina_groups {
		$sprite_name = $retina_group[0];
		.{$sprite_name} {
			retinaSprite $retina_group
		}
	}
}
